- https://elixir-lang.org/getting-started/introduction.html

- install elixir on fedora
#+begin_example
sudo dnf install elixir
#+end_example

- start interactive elixir session `iex`
- quit elixir `press C-c twice`
- run elixir from file `elixir sample.exs`

- format elixir file `mix format sample.exs`

- https://www.youtube.com/watch?v=OR2Gc6_Le2U&feature=youtu.be
  - 2019 fred herbert
  - sys:trace
  - sys:log 27:40
  - sys:get_status
  - microstate accounting
  - recon_trace:calls
  - sudo perf top -p `pgrep beam`
  - dtrace, systemtap
    - dyntrace module
  - property-based testing with PropEr, Erlang and Elixir
  - rebar3 shell
  - iex -S mix test
  - IEx.pry()

- https://www.youtube.com/watch?v=JvBT4XBdoUE
  - sasa juric
  - shows how erlang/beam can be debugged


* Changelog
|          |                                                                                    |
| 20210123 | incompatible change in receive semantics, old behaviour available as semantics_old |
|          |                                                                                    |
|          |                                                                                    |




* Examples

|                   | comment                                                                   | link                                                                            |
| 01_first          | learn about semantics                                                     |                                                                                 |
| 02_mix_intro      | try mix with bucket                                                       | https://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html |
| 03_phx_intro      | start phoenix example (no live)                                           | https://hexdocs.pm/phoenix/up_and_running.html                                  |
| 04_book           | failing to find interesting example, some emacs                           | several books                                                                   |
| 05_todo           | How to Create a Todo List with Phoenix LiveView (Updated for Phoenix 1.5) | https://www.youtube.com/watch?v=xgz-HTot3R8                                     |
| 06_live           | Chris McCord - Keynote: Phoenix LiveView                                  | https://www.youtube.com/watch?v=8xJzHq8ru0M                                     |
| 07_excercise      | some basic examples                                                       | https://github.com/seven1m/30-days-of-elixir                                    |
| 08_minimal_live   | translate live app that mix generates into s-expressions                  |                                                                                 |
| 09_minimal_live_2 | modify 08 to do something useful                                          |                                                                                 |
|                   |                                                                           |                                                                                 |
|                   |                                                                           |                                                                                 |
|                   |                                                                           |                                                                                 |
|                   |                                                                           |                                                                                 |
|                   |                                                                           |                                                                                 |
|                   |                                                                           |                                                                                 |
|                   |                                                                           |                                                                                 |


* Reminder

- these are the same, I always forget this. a list of tuples in elixir
  is like an alist in common lisp.
#+begin_example
render(conn, "world.html", name: name)
render(conn, "world.html", [name: name])
render(conn, "world.html", [{:name, name}])
#+end_example
